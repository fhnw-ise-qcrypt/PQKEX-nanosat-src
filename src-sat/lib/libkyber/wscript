#!/usr/bin/env python
# encoding: utf-8

import os

APPNAME = 'libkyber'
VERSION = '1.0'

def options(ctx):
	gr = ctx.add_option_group('libkyber options')
	gr.add_option('--install-libkyber', action='store_true', help='Installs Kyber KEM headers and lib')
def configure(ctx):
	if ctx.options.install_libkyber == 1:
		ctx.env.append_unique('FILES_KYBER', 	['src/**/*.c'])
		#ctx.env.append_unique('FILES_ADCS',	['adcs/**/*.cpp', 'server/**/*.cpp', 'task/**/*.cpp'])	
		#ctx.env.LIB_KYBER = []
		#ctx.env.LIBPATH_KYBER = ['src']
		#ctx.env.INCLUDES_KYBER = ['includes']
		
	#ctx.define('WDE_EPS_CHANNEL', ctx.options.wde_eps_ch)

	#ctx.env.append_unique('USES_ADCS', ['include', 'gomspace', 'util', 'csp', 'gssb', 'param', 'a3200_h'])
	ctx.write_config_header('include/conf_kyber.h', top=True, remove=True)

def build(ctx):
	ctx.objects(source=ctx.path.ant_glob(ctx.env.FILES_KYBER, excl=ctx.env.EXCLUDES_KYBER), 
            target='kyber',
            includes = 'include',
            defines = ctx.env.DEFINES_KYBER,
            export_includes='include'
        )
	# cflags=ctx.env.CFLAGS + ['-Wno-sign-compare', '-Wno-cast-align', '-fno-strict-aliasing']

